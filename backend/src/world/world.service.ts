import { Injectable, NotFoundException } from '@nestjs/common';
import { DrizzleService } from '../db/drizzle.service';
import { encounters, worldState, encounterResolutions, worldEvents, type NewWorldEvent} from './world.schema';
import { ResolveEncounterDto, WorldStateResponseDto, EncounterResponseDto, EncounterResolutionResponseDto } from './world.dto';
import { eq, and } from 'drizzle-orm';

@Injectable()
export class WorldService {
  constructor(private readonly drizzleService: DrizzleService) {}

  async getWorldState(): Promise<WorldStateResponseDto> {
    const [state] = await this.drizzleService.db
      .select()
      .from(worldState)
      .limit(1);

    if (!state) {
      // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∏—Ä–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      const [newState] = await this.drizzleService.db
        .insert(worldState)
        .values({
          currentDay: 1,
          activeEncounters: [],
          worldEvents: [],
        })
        .returning();

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –º–∏—Ä–∞
      const eventsResult = await this.generateInitialWorldEvents();
      console.log(`üåç –°–æ–±—ã—Ç–∏—è –º–∏—Ä–∞ ${eventsResult.created ? '—Å–æ–∑–¥–∞–Ω—ã' : '—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç'}: ${eventsResult.count} —Å–æ–±—ã—Ç–∏–π`);

      return {
        currentDay: newState.currentDay,
        activeEncounters: newState.activeEncounters as any[],
        worldEvents: newState.worldEvents as any[],
        lastUpdated: newState.lastUpdated.toISOString(),
      };
    }

    return {
      currentDay: state.currentDay,
      activeEncounters: state.activeEncounters as any[],
      worldEvents: state.worldEvents as any[],
      lastUpdated: state.lastUpdated.toISOString(),
    };
  }

  async getEncounter(id: number): Promise<EncounterResponseDto> {
    const [encounter] = await this.drizzleService.db
      .select()
      .from(encounters)
      .where(eq(encounters.id, id))
      .limit(1);

    if (!encounter) {
      throw new NotFoundException('–≠–Ω–∫–∞—É–Ω—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    return {
      id: encounter.id,
      name: encounter.name,
      description: encounter.description || '',
      type: encounter.type,
      difficulty: encounter.difficulty,
      rewards: encounter.rewards,
      requirements: encounter.requirements,
    };
  }

  async resolveEncounter(
    id: number,
    userId: number,
    resolveDto: ResolveEncounterDto,
  ): Promise<EncounterResolutionResponseDto> {
    const encounter = await this.getEncounter(id);

    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —ç–Ω–∫–∞—É–Ω—Ç–µ—Ä–∞
    // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
    const success = resolveDto.resolution === 'success';
    const rewardsReceived = success ? encounter.rewards : null;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    await this.drizzleService.db.insert(encounterResolutions).values({
      encounterId: id,
      userId,
      resolution: resolveDto.resolution,
      rewardsReceived,
    });

    return {
      success,
      rewardsReceived,
      message: success 
        ? '–≠–Ω–∫–∞—É–Ω—Ç–µ—Ä —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω!' 
        : '–≠–Ω–∫–∞—É–Ω—Ç–µ—Ä –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑—Ä–µ—à–∏—Ç—å.',
    };
  }

  async generateInitialWorldEvents(): Promise<{ created: boolean; count: number }> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ–±—ã—Ç–∏—è –≤ –º–∏—Ä–µ
    const existingEvents = await this.drizzleService.db
      .select()
      .from(worldEvents)
      .limit(1);

    if (existingEvents.length > 0) {
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–æ–±—ã—Ç–∏–π
      const allEvents = await this.drizzleService.db
        .select()
        .from(worldEvents);
      return { created: false, count: allEvents.length };
    }

    const STEP_PX = 64;
    const WORLD_LENGTH_PX = 64 * 200;
    const types: ('npc' | 'monster' | 'chest')[] = ['npc', 'monster', 'chest'];
    const used: number[] = [];
    const count = 18;
    const generated: NewWorldEvent[] = [];

    for (let i = 0; i < count; i++) {
      let x = Math.round(this.randomBetween(8, (WORLD_LENGTH_PX - 8) / STEP_PX)) * STEP_PX;
      let attempts = 0;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏—è –Ω–µ —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –¥—Ä—É–≥ –∫ –¥—Ä—É–≥—É
      while (used.some((u) => Math.abs(u - x) < STEP_PX * 4) && attempts < 20) {
        x = Math.round(this.randomBetween(8, (WORLD_LENGTH_PX - 8) / STEP_PX)) * STEP_PX;
        attempts++;
      }
      
      used.push(x);
      const type = types[Math.floor(Math.random() * types.length)];
      const eventData = this.createEventData(type, x, i);
      
      generated.push({
        eventId: `${type}-${x}-${i}`,
        position: x,
        type,
        title: eventData.title,
        description: eventData.description,
        imageUrl: eventData.imageUrl,
        requiresAction: true,
        actions: eventData.actions,
        rewards: eventData.rewards,
        isResolved: false,
      });
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–∑–∏—Ü–∏–∏
    generated.sort((a, b) => a.position - b.position);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await this.drizzleService.db.insert(worldEvents).values(generated);

    return { created: true, count: generated.length };
  }

  async getEventAtPosition(position: number): Promise<any | null> {
    const [event] = await this.drizzleService.db
      .select()
      .from(worldEvents)
      .where(and(
        eq(worldEvents.position, position),
        eq(worldEvents.isResolved, false)
      ))
      .limit(1);

    return event || null;
  }

  async resolveEvent(eventId: string, userId: number): Promise<void> {
    await this.drizzleService.db
      .update(worldEvents)
      .set({
        isResolved: true,
        resolvedBy: userId,
        resolvedAt: new Date(),
        updatedAt: new Date(),
      })
      .where(eq(worldEvents.eventId, eventId));
  }

  private randomBetween(min: number, max: number): number {
    return Math.random() * (max - min) + min;
  }

  private createEventData(type: string, position: number, index: number) {
    switch (type) {
      case 'npc':
        return {
          title: '–ü—É—Ç–Ω–∏–∫',
          description: '–ù–µ–∑–Ω–∞–∫–æ–º–µ—Ü –º–∞—à–µ—Ç —Ä—É–∫–æ–π',
          imageUrl: '/images/npc_traveler.png',
          actions: ['talk', 'ignore'],
          rewards: null,
        };
      case 'monster':
        return {
          title: '–ú–æ–Ω—Å—Ç—Ä',
          description: '–í—Ä–∞–≥ –ø—Ä–µ–≥—Ä–∞–∂–¥–∞–µ—Ç –ø—É—Ç—å',
          imageUrl: '/images/monster.png',
          actions: ['fight', 'run'],
          rewards: {
            gold: Math.floor(Math.random() * 30) + 10,
            experience: Math.floor(Math.random() * 15) + 5,
          },
        };
      case 'chest':
        return {
          title: '–°—É–Ω–¥—É–∫',
          description: '–°—Ç–∞—Ä—ã–π —Å—É–Ω–¥—É–∫ –ø–æ–∫—Ä—ã—Ç—ã–π –ø—ã–ª—å—é',
          imageUrl: '/images/treasure_chest.png',
          actions: ['open', 'ignore'],
          rewards: {
            gold: Math.floor(Math.random() * 50) + 20,
            experience: Math.floor(Math.random() * 25) + 10,
          },
        };
      default:
        return {
          title: '–°—Ç—Ä–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ',
          description: '–ß—Ç–æ-—Ç–æ –Ω–µ–æ–±—ã—á–Ω–æ–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∑–¥–µ—Å—å',
          imageUrl: '/images/mystery.png',
          actions: ['investigate', 'ignore'],
          rewards: null,
        };
    }
  }
}
